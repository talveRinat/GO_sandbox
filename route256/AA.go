/*
Медианы
Условия
Размещая товар на маркетплейсе, продавец может ошибиться при вводе цены.
Чтобы предупредить его о возможной ошибке, необходимо просигнализировать о значительном отклонении
новой цены от медианной цены, подсчитанной по группе аналогичных товаров.
При этом, чтобы исключить влияние новой (редактируемой) цены на расчет медианы,
саму эту цену в расчете учитывать не надо.

Напишите программу, позволяющую выполнить такой расчет.

Пусть медиана массива a0, a1,...an−1 определяется, как ⌊n / 2⌋-й элемент в отсортированном порядке.
Например:
Медиана массива [1, 3, 2] равна 2
Медиана массива [5, 3, 2, 8] равна 5
Медиана массива [7] равна 7
Вам дан массив из n элементов a0, a1, . . . an−1.

Необходимо для каждого i найти медиану среди массива a0, a1, . . . ai−1, ai+1, . . . an−1
(исходный массив без элемента ai).
Формат входных данных
В первой строке входных данных содержится одно целое число n — размер массива (2 ≤ n ≤ 105).

Во второй строке содержатся n целых чисел a0, a1, . . . an−1 разделенные пробелом — элементы массива (1 ≤ a_i ≤ 109).

Формат выходных данных
Выведите n чисел m0, m1, . . . mn−1 - каждое на отдельной строке — искомые медианы для каждого i.

Примеры
Входные данные:
2
13 7
Выходные данные:
7
13

Входные данные:
3
1 2 1
Выходные данные:
2
1
2
*/
package main

import (
	"fmt"
	"sort"
)

func Median(A []int) int {
	sort.Ints(A)
	return A[len(A)/2]
}

func RemoveIndex(s []int, index int) []int {
	out := make([]int, 0)
	out = append(out, s[:index]...)
	return append(out, s[index+1:]...)
}

func main() {
	var n int
	fmt.Scanf("%d", &n)

	m := make([]int, n)
	for i := 0; i < n; i++ {
		fmt.Scanf("%d", &m[i])
	}

	for i := 0; i < n; i++ {
		fmt.Printf("%d\n", Median(RemoveIndex(m, i)))
	}

}
