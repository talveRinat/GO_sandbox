/*
Представьте что вы работаете в большой компании где используется модульная архитектура.
Ваш коллега написал модуль с какой-то логикой (вы не знаете) и передает в вашу программу какие-то данные.
Вы же пишете функцию которая считывает две переменных типа string ,
а возвращает число типа int64 которое нужно получить сложением этих строк.

Но не было бы так все просто, ведь ваш коллега не пишет на Go, и он зол из-за того,
что гоферам платят больше. Поэтому он решил подшутить над вами и подсунул вам свинью.
Он придумал вставлять мусор в строки перед тем как вызывать вашу функцию.

Поэтому предварительно вам нужно убрать из них мусор и конвертировать в числа.
Под мусором имеются ввиду лишние символы и спец знаки.
Разрешается использовать только определенные пакеты: fmt, strconv, unicode, strings,  bytes.
Они уже импортированы, вам ничего импортировать не нужно!

Считывать и выводить ничего не нужно!
Ваша функция должна называться adding() !
Считайте что функция и пакет main уже объявлены!

Sample Input: %^80 hhhhh20&&&&nd

Sample Output: 100
*/
package main

import (
	"fmt"
	"strconv"
	"unicode"
)

func adding(a, b string) int64 {
	var n, m string

	// находим числа в первой строке
	for i := range a {
		if unicode.IsDigit(rune(a[i])) {
			n += string(a[i])
		}
	}

	// находим числа во второй строке
	for i := range b {
		if unicode.IsDigit(rune(b[i])) {
			m += string(b[i])
		}
	}

	// преобразуем из строки в число
	nInt, err := strconv.Atoi(n)
	if err != nil {
		panic(err)
	}
	mInt, err := strconv.Atoi(m)
	if err != nil {
		panic(err)
	}

	res := nInt + mInt
	return int64(res)
}

func main() {
	fmt.Println(adding("%^80", "hhhhh20&&&&nd"))
}
