/*
Для решения данной задачи вам понадобится пакет strconv, возможно использовать пакеты strings или encoding/csv,
или даже bufio - вы не ограничены в выборе способа решения задачи.
В решениях мы поделимся своими способами решения этой задачи, предлагаем вам сделать то же самое.

В привычных нам редакторах электронных таблиц присутствует удобное представление числа с разделителем разрядов
в виде пробела, кроме того в России целая часть от дробной отделяется запятой.
Набор таких чисел был экспортирован в формат CSV, где в качестве разделителя используется символ ";".

На стандартный ввод вы получаете 2 таких вещественных числа,
в качестве результата требуется вывести частное от деления первого числа на второе с точностью
до четырех знаков после "запятой" (на самом деле после точки, результат не требуется приводить к исходному формату).

P.S. небольшое отступление, связанное с чтением из стандартного ввода.
Кто-то захочет использовать для этого пакет bufio.Reader.
Это вполне допустимый вариант, но если вы резонно обрабатываете ошибку метода ReadString('\n'),
то получаете ошибку EOF, а точнее (io.EOF - End Of File).
На самом деле это не ошибка, а состояние, означающее, что файл (а os.Stdin является файлом) прочитан до конца.
Чтобы ошибка была обработана правильно, вы можете поступить так:

if err != nil && err != io.EOF {
	...
}

Sample Input:
1 149,6088607594936;1 179,0666666666666

Sample Output:
0.9750
*/
package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {

	// считываем строку, удаляем "\n"
	reader := bufio.NewReader(os.Stdin)
	str, _ := reader.ReadString('\n')
	str = strings.TrimSuffix(str, "\n")

	// заменя запятых на точку
	replaceComma := strings.Replace(str, ",", ".", -1)

	// убираем представление числа с разделителем разрядов в виде пробела
	replaceSpace := strings.Replace(replaceComma, " ", "", -1)

	// убираем точку с запятой
	replaceSemicolon := strings.Replace(replaceSpace, ";", " ", -1)

	// получаем список строк
	arr := strings.Split(replaceSemicolon, " ")

	// Конвертация первого число из  string в float
	n1, err := strconv.ParseFloat(arr[0], 64)
	if err != nil {
		panic(err)
	}

	// Конвертация второго числа из string в float
	n2, err := strconv.ParseFloat(arr[1], 64)
	if err != nil {
		panic(err)
	}

	// округление до 4 знаков после запятой
	fmt.Println(strconv.FormatFloat(n1/n2, 'f', 4, 64))
}
