/*
Пришло время для задач, где вы сможете применить полученные знания на практике.

Обязательные условия выполнения: данные со стандартного ввода читаются функцией readTask(),
которая возвращает 3 значения типа пустой интерфейс.
Эта функция использует пакеты encoding/json, fmt, и os - не удаляйте их из импорта.
Скорее всего, вам понадобится пакет "fmt", но вы можете использовать любой другой пакет для записи в
стандартный вывод не удаляя fmt.

Итак, вы получаете 3 значения типа пустой интерфейс: если все удачно, то первые 2 значения будут float64.
Третье значение в идеальном случае будет строкой, которая может иметь значения:
"+", "-", "*", "/" (определенная математическая операция).
Но такие идеальные случаи будут не всегда, вы можете получить значения других типов,
а также строка в третьем значении может не относится к одной из указанных математических операций.

Результат выполнения программы должен быть таков:

в штатной ситуации вы должны напечатать в стандартный вывод результат выполнения математической операции с точностью до 4 цифры после запятой (fmt.Printf(%.4f));
если первое или второе значение не является типом float64, вы должны напечатать сообщение об ошибке вида: value=полученное_значение: тип_значения (например: value=true: bool)
если третье значение имеет неверный тип или передан знак, не относящийся к указанным выше математическим операциям, сообщение об ошибке должно иметь вид: неизвестная операция
Гарантируется, что ошибка в аргументах может быть только одна, поэтому если вы при проверке первого значения увидели, что оно содержит ошибку - печатайте сообщение об ошибке и завершайте работу программы, проверка остальных аргументов значения уже не имеет, а проверяющая система воспримет 2 сообщения об ошибке как нарушение условия выполнения задания.
*/
package main

import (
	_ "encoding/json" // пакет используется для проверки ответа, не удаляйте его
	"fmt"             // пакет используется для проверки ответа, не удаляйте его
	_ "os"            // пакет используется для проверки ответа, не удаляйте его
)

func readTask() (value1, value2, operation interface{}) {
	var v1, v2 float64
	var o string
	fmt.Scan(&v1, &v2, &o)
	return v1, v2, o
}

func main() {
	vi1, vi2, operation := readTask()
	vi := [2]interface{}{vi1, vi2}
	var v1, v2 float64
	vf := [2]*float64{&v1, &v2}
	var ok bool
	for i, v := range vi {
		if *vf[i], ok = v.(float64); !ok {
			fmt.Printf("value=%v: %T", v, v)
			return
		}
	}
	ops := map[string]func() float64{
		"+": func() float64 { return v1 + v2 },
		"-": func() float64 { return v1 - v2 },
		"*": func() float64 { return v1 * v2 },
		"/": func() float64 { return v1 / v2 },
	}

	if oper, ok := operation.(string); ok {
		if fun, ok := ops[oper]; ok {
			fmt.Printf("%.4f", fun())
			return
		}
	}
	fmt.Print("неизвестная операция")

}
